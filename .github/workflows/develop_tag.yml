name: Develop Tag

on:
  pull_request:
    branches: [ develop ]
    types:
      - opened
      - synchronize
      - closed
  workflow_dispatch:
jobs:
  # criar a tag na develop se o a pr for concluida
  TagEuDev: 
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' && 
            github.event.action == 'closed' && 
            github.event.pull_request.merged == true && 
            github.event.pull_request.base.ref == 'develop' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Git Identity
        run: |
          git config user.email "eduardo.gobetti@gmail.com"
          git config user.name "Eduardo Gobetti"

      - name: Get Latest Tag
        id: latest_tag
        run: echo "::set-output name=TAG_VERSION::$(git describe --tags --abbrev=0)"

      - name: Determine Next Version
        id: next_version
        run: |
          # Obter a última versão
          latest_version=$(echo "${{ steps.latest_tag.outputs.TAG_VERSION }}")

          # Dividir a versão em partes (major, minor, patch)
          IFS='.' read -r -a version_parts <<< "$latest_version"

          # Incrementar o número de patch
          version_parts[2]=$((version_parts[2]+1))

          # Construir a nova versão
          new_version="${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"
          echo "::set-output name=TAG_VERSION::${new_version}"

      - name: Create Tag
        run: echo "tag ==>> ${{ steps.next_version.outputs.TAG_VERSION }}"
        # run: |
        #   echo "Creating tag v${{ steps.next_version.outputs.TAG_VERSION }}"
        #   git tag -a "v${{ steps.next_version.outputs.TAG_VERSION }}" -m "Tagging version ${{ steps.next_version.outputs.TAG_VERSION }}"
        #   git push origin "v${{ steps.next_version.outputs.TAG_VERSION }}"
        